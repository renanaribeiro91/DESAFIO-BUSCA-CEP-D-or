import Path from 'path';
import { writeFileSync } from 'fs';
import { InputFileFilter } from './types';
import { convertFilesInDirectory } from './convertFilesInDirectory';
import { writeInterfaceFile } from './writeInterfaceFile';
import { convertSchemaInternal } from './analyseSchemaFile';
/**
 * Apply defaults to the Partial Settings parameter
 *
 * @param settings Partial Setting object
 * @returns Complete Settings object
 */
function defaultSettings(settings) {
    const appSettings = Object.assign({
        useLabelAsInterfaceName: false,
        defaultToRequired: false,
        schemaFileSuffix: 'Schema',
        debug: false,
        fileHeader: `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */`,
        sortPropertiesByName: true,
        commentEverything: false,
        ignoreFiles: [],
        indentationChacters: '  ',
        honorCastTo: [],
        treatDefaultedOptionalAsRequired: false,
        supplyDefaultsInType: false,
        inputFileFilter: InputFileFilter.Default
    }, settings);
    return appSettings;
}
export function convertSchema(settings, joi, exportedName, root) {
    const appSettings = defaultSettings(settings);
    return convertSchemaInternal(appSettings, joi, exportedName, root);
}
export function getTypeFileNameFromSchema(schemaFileName, settings) {
    return schemaFileName.endsWith(`${settings.schemaFileSuffix}.ts`)
        ? schemaFileName.substring(0, schemaFileName.length - `${settings.schemaFileSuffix}.ts`.length)
        : schemaFileName.replace('.ts', '');
}
/**
 * Write index.ts file
 *
 * @param settings - Settings Object
 * @param fileNamesToExport - List of file names that will be added to the index.ts file
 */
export function writeIndexFile(settings, fileNamesToExport) {
    if (fileNamesToExport.length === 0) {
        // Don't write an index file if its going to export nothing
        return;
    }
    const exportLines = fileNamesToExport.map(fileName => `export * from './${fileName.replace(/\\/g, '/')}';`);
    const fileContent = `${settings.fileHeader}\n\n${exportLines.join('\n').concat('\n')}`;
    writeFileSync(Path.join(settings.typeOutputDirectory, 'index.ts'), fileContent);
}
/**
 * Create types from schemas from a directory
 *
 * @param settings - Configuration settings
 * @returns The success or failure of this operation
 */
export async function convertFromDirectory(settings) {
    const appSettings = defaultSettings(settings);
    const filesInDirectory = await convertFilesInDirectory(appSettings, Path.resolve(appSettings.typeOutputDirectory));
    if (!filesInDirectory.types || filesInDirectory.types.length === 0) {
        throw new Error('No schemas found, cannot generate interfaces');
    }
    for (const exportType of filesInDirectory.types) {
        writeInterfaceFile(appSettings, exportType.typeFileName, filesInDirectory.types);
    }
    if (appSettings.indexAllToRoot || appSettings.flattenTree) {
        // Write index.ts
        writeIndexFile(appSettings, filesInDirectory.typeFileNames);
    }
    return true;
}
